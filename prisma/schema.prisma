// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model office {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  department department[]
  user user[]
  
}

model department {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  now_serving String @db.VarChar(255)
  description String @db.Text
  officeId Int
  office office @relation(fields: [officeId], references: [id], onDelete: Cascade)
  tickets tickets[] 
  service service[]
}

model tickets {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  status       Int        @default(0)
  departmentId Int
  department   department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model service {
  id Int @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  service_time Float 
  departmentId Int
  department department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}
model user {
  id Int @id @default(autoincrement())
  username String @db.VarChar(50)
  password String @db.VarChar(255)
  officeId Int?
  office office? @relation(fields: [officeId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @db.Timestamp(0)
}